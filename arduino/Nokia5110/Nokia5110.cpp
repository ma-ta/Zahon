#include "Arduino.h"
#include "Nokia5110.h"

  
int PIN_SCE;
int PIN_RESET;
int PIN_DC;
int PIN_SDIN;
int PIN_SCLK;
    
   
int CharSpace;

const unsigned char logo [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x81, 0xF1, 0x19,
0x09, 0x01, 0x01, 0x09, 0x19, 0xF1, 0x81, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x0F, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x9F, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x87, 0xF7, 0xFF, 0x9F, 0x1F,
0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x79, 0x19, 0x19, 0x79, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF9, 0xF9, 0xFF, 0xE7, 0xE1, 0xF8, 0xFE, 0xFF,
0xFF, 0xFF, 0xFB, 0xF9, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x9C, 0x84, 0x84, 0x9C, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x87, 0x87, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xFB, 0xFB, 0xE3,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


LCDnokia5110::LCDnokia5110(int rst, int ce, int dc, int in, int clk){        
      #define LCD_C     LOW
      #define LCD_D     HIGH
      #define LCD_CMD   0
 
      // velikost LCD
      #define LCD_X     84
      #define LCD_Y     48
     
      PIN_SCE = ce;
      PIN_RESET = rst;
      PIN_DC = dc;
      PIN_SDIN = in;
      PIN_SCLK = clk;
      
      CharSpace = 1;   
    }
    

    





    void LCDnokia5110::LcdCharacter(char character)
{

 static const byte ASCII[][5] =
{
 {0x00, 0x00, 0x00, 0x00, 0x00} // 20 mezera
,{0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
,{0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
,{0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
,{0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
,{0x00, 0x00, 0x07, 0x05, 0x07} // 27 ' ----- Celsius modify char
,{0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
,{0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
,{0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
,{0x00, 0x08, 0x08, 0x08, 0x00} // 2d -
,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c zpetne lomitko
,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
,{0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ~
,{0x00, 0x06, 0x09, 0x09, 0x06} // 7f DELETE
};

static const byte EXT_ASCII[][5]
{
 {0x78, 0x24, 0x26, 0x25, 0x78} // c1 Á
,{0x7c, 0x54, 0x56, 0x55, 0x54} // c9 É
,{0x00, 0x44, 0x7e, 0x45, 0x00} // cd Í
,{0x38, 0x44, 0x46, 0x45, 0x38} // d3 Ó
,{0x3c, 0x40, 0x42, 0x41, 0x3c} // da Ú
,{0xc,  0x10, 0x62, 0x11, 0xc}  // dd Ý
,{0x7c, 0x55, 0x56, 0x55, 0x54} // ca Ě
,{0x38, 0x42, 0x45, 0x42, 0x38} // db Ů
,{0x44, 0x65, 0x56, 0x4d, 0x44} // 8e Ž
};
  
       
if (CharSpace > 0) {LcdWrite(LCD_D, 0x00);} 

   	for (int index = 0; index < 5; index++)
   	{
      switch(character)
      {
        case '\xc1':
          LcdWrite(LCD_D, EXT_ASCII[0][index]);
          break;
        case '\xc9':
          LcdWrite(LCD_D, EXT_ASCII[1][index]);
          break;
        case '\xcd':
          LcdWrite(LCD_D, EXT_ASCII[2][index]);
          break;
        case '\xd3':
          LcdWrite(LCD_D, EXT_ASCII[3][index]);
          break;
        case '\xda':
          LcdWrite(LCD_D, EXT_ASCII[4][index]);
          break;
        case '\xdd':
          LcdWrite(LCD_D, EXT_ASCII[5][index]);
          break;
        case '\xca':
          LcdWrite(LCD_D, EXT_ASCII[6][index]);
          break;
        case '\xdb':
          LcdWrite(LCD_D, EXT_ASCII[7][index]);
          break;
        case '\x8e':
          LcdWrite(LCD_D, EXT_ASCII[8][index]);
          break;
        default:
          LcdWrite(LCD_D, ASCII[character - 0x20][index]);
      }
   	}
 
        if (CharSpace > 1) {LcdWrite(LCD_D, 0x00);}
             
  
}
 
void LCDnokia5110::HorizontalBar(int value, int LineIndex)
{
   static const byte BAR[4] = {0x01, 0xf1, 0x07, 0xf7};
   float val2 = value * 0.84f;
   if (val2 > 83) val2 = 83;   

   GotoXY(0,LineIndex);
      
   for (int index = 0; index <= (int)val2; index++)
	{
	 if ((index == 0)|(index == 21)|(index == 42)|(index == 63)|(index == 83)) LcdWrite(LCD_D, BAR[3]); else
		LcdWrite(LCD_D, BAR[1]);	
	}
   for (int index = (int)val2+1 ; index < 84; index++)
	{
	 if ((index == 0)|(index == 21)|(index == 42)|(index == 63)|(index == 83)) LcdWrite(LCD_D, BAR[2]); else
		LcdWrite(LCD_D, BAR[0]);	
	}
   

}

void LCDnokia5110::HorizontalBar2(int value, int LineIndex)
{
   static const byte BAR[2] = {0x10, 0x70};
   byte data = 0x00;
   int val2 = value * 0.84f;
   if (val2 > 83) val2 = 83;   

   GotoXY(0,LineIndex);
   
   
   for (int index = 0; index <= 83; index++)
	{
	
		{
		   
		   if (index == val2) data = BAR[0]+ 0x07; 
		   else if (index == (val2-1)) data = BAR[0]+ 0x03;
	           else if (index == (val2-2)) data= BAR[0]+ 0x01; 
		   else if (index == (val2+1)) data= BAR[0]+ 0x03;
	           else if (index == (val2+2)) data= BAR[0]+ 0x01;			 	
		   
		   
			else data = BAR[0];
		}
		
                if ((index == 0)|(index == 21)|(index == 42)|(index == 63)|(index == 83)) data = data + 0x60;
		LcdWrite(LCD_D, data);
	
	}
   
   

}


 void LCDnokia5110::VerticalBar(int value, int X)
 {
	long line1 = 0b10000000000000000000000000000000;
	long line2 = 0b10000000000000000000000000000000;
		
	if (value > 100) value = 100;
	value = value * 0.32f;
	
	
	line1 = line1 >> value;
	line2 = line2 >> value;
		
		 GotoXY(X,5);
		 LcdWrite(LCD_D, 0x01);
		 LcdWrite(LCD_D, 0xff);	
		 LcdWrite(LCD_D, 0x00);		 
		 LcdWrite(LCD_D, line1 >> 24 );
		 LcdWrite(LCD_D, line2 >> 24 );
		 LcdWrite(LCD_D, line2 >> 24 );
		 
		 GotoXY(X,4);
		 LcdWrite(LCD_D, 0x01);
		 LcdWrite(LCD_D, 0xff);
		 LcdWrite(LCD_D, 0x00);	
		 LcdWrite(LCD_D, line1 >> 16 );
		 LcdWrite(LCD_D, line2 >> 16 );
		 LcdWrite(LCD_D, line2 >> 16);
		 
		 GotoXY(X,3);
		 LcdWrite(LCD_D, 0x01);
		 LcdWrite(LCD_D, 0xff);
		 LcdWrite(LCD_D, 0x00);	
		 LcdWrite(LCD_D, line1 >> 8 );
		 LcdWrite(LCD_D, line2 >> 8 );
		 LcdWrite(LCD_D, line2 >> 8 );
		 
		 GotoXY(X,2);
		 LcdWrite(LCD_D, 0x01);
		 LcdWrite(LCD_D, 0xff);
		 LcdWrite(LCD_D, 0x00);	
		 LcdWrite(LCD_D, line1); // >> 0 -2);
		 LcdWrite(LCD_D, line2); //>> 0 - 2);
		 LcdWrite(LCD_D, line2); //>> 0 - 2);
	
	
	
	
	
	
 }
 
 
 

void LCDnokia5110::LcdClear(void)
{
  
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++)
  {
    LcdWrite(LCD_D, 0x00);
  }
}


void LCDnokia5110::LcdString(char* characters)
{
  
  
  
  while (*characters)
  {
    LcdCharacter(*characters++);
  }

  

  
}

void LCDnokia5110::LcdInt(int number)
{
  String s = String(number);
  char const *znaky = s.c_str();
  
  while (*znaky)
  {
    LcdCharacter(*znaky++);
  }
}
 

void LCDnokia5110::LcdWrite(byte dc, byte data)
{
  digitalWrite(PIN_DC, dc);
  digitalWrite(PIN_SCE, LOW);
  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);
  digitalWrite(PIN_SCE, HIGH);
}


void LCDnokia5110::LcdInitialise(void)
{
  pinMode(PIN_SCE,   OUTPUT);
  pinMode(PIN_RESET, OUTPUT);
  pinMode(PIN_DC,    OUTPUT);
  pinMode(PIN_SDIN,  OUTPUT);
  pinMode(PIN_SCLK,  OUTPUT);
  
  delay(30); // přidaná pauza
  digitalWrite(PIN_RESET, LOW);
  delay(1); // přidaná pauza
  digitalWrite(PIN_RESET, HIGH);
 
  LcdWrite(LCD_CMD, 0x21);  // LCD Extended Commands.
  LcdWrite(LCD_CMD, 0xB1);  // Set LCD Vop (Contrast). //B1
  LcdWrite(LCD_CMD, 0x04);  // Set Temp coefficent. //0x04
  LcdWrite(LCD_CMD, 0x14);  // LCD bias mode 1:48. //0x13
  LcdWrite(LCD_CMD, 0x0c);  // LCD in normal mode. 0x0d for inverse
  LcdWrite(LCD_C, 0x20);
  LcdWrite(LCD_C, 0x0C);
}

void LCDnokia5110::GotoXY(int x, int y) {

  LcdWrite( 0, 0x80 | x);  // Column.
  LcdWrite( 0, 0x40 | y);  // Row.

}

void LCDnokia5110::ShowImage(const unsigned char Image[], int miliSeconds)
{

GotoXY(0,0);
for (int index = 0; index < 503; index++)
  {
    LcdWrite(LCD_D, Image[index]);
 }
delay(miliSeconds);
}

void LCDnokia5110::ShowLogo(int miliSeconds) {
  ShowImage(logo, miliSeconds);
}